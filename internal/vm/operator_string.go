// Code generated by "stringer -type=Operator -linecomment"; DO NOT EDIT.

package vm

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpNoop-0]
	_ = x[OpPop-1]
	_ = x[OpPop2-2]
	_ = x[OpReturn-3]
	_ = x[OpReturnValue-4]
	_ = x[OpAdd-5]
	_ = x[OpSub-6]
	_ = x[OpMul-7]
	_ = x[OpDiv-8]
	_ = x[OpMod-9]
	_ = x[OpPow-10]
	_ = x[OpBwAnd-11]
	_ = x[OpBwOr-12]
	_ = x[OpBwXor-13]
	_ = x[OpBwNot-14]
	_ = x[OpShiftLeft-15]
	_ = x[OpShiftRight-16]
	_ = x[OpEqual-17]
	_ = x[OpNotEqual-18]
	_ = x[OpIdentical-19]
	_ = x[OpNotIdentical-20]
	_ = x[OpNot-21]
	_ = x[OpGreater-22]
	_ = x[OpLess-23]
	_ = x[OpGreaterOrEqual-24]
	_ = x[OpLessOrEqual-25]
	_ = x[OpCompare-26]
	_ = x[OpCoalesce-27]
	_ = x[OpAssignRef-28]
	_ = x[OpArrayNew-29]
	_ = x[OpArrayAccessRead-30]
	_ = x[OpArrayAccessWrite-31]
	_ = x[OpArrayAccessPush-32]
	_ = x[OpArrayUnset-33]
	_ = x[OpConcat-34]
	_ = x[OpUnset-35]
	_ = x[OpForEachInit-36]
	_ = x[OpForEachNext-37]
	_ = x[OpForEachValid-38]
	_ = x[OpThrow-39]
	_ = x[OpInitCallByName-40]
	_ = x[_opOneOperand-40]
	_ = x[OpAssign-41]
	_ = x[OpAssignAdd-42]
	_ = x[OpAssignSub-43]
	_ = x[OpAssignMul-44]
	_ = x[OpAssignDiv-45]
	_ = x[OpAssignMod-46]
	_ = x[OpAssignPow-47]
	_ = x[OpAssignBwAnd-48]
	_ = x[OpAssignBwOr-49]
	_ = x[OpAssignBwXor-50]
	_ = x[OpAssignConcat-51]
	_ = x[OpAssignShiftLeft-52]
	_ = x[OpAssignShiftRight-53]
	_ = x[OpAssignCoalesce-54]
	_ = x[OpCast-55]
	_ = x[OpPreIncrement-56]
	_ = x[OpPostIncrement-57]
	_ = x[OpPreDecrement-58]
	_ = x[OpPostDecrement-59]
	_ = x[OpLoad-60]
	_ = x[OpLoadRef-61]
	_ = x[OpConst-62]
	_ = x[OpJump-63]
	_ = x[OpJumpTrue-64]
	_ = x[OpJumpFalse-65]
	_ = x[OpInitCall-66]
	_ = x[OpCall-67]
	_ = x[OpEcho-68]
	_ = x[OpIsSet-69]
	_ = x[OpForEachKey-70]
	_ = x[OpForEachValue-71]
	_ = x[OpForEachValueRef-72]
}

const _Operator_name = "NOOPPOPPOP2RETURNRETURN_VALADDSUBMULDIVMODPOWBW_ANDBW_ORBW_XORBW_NOTLSHIFTRSHIFTEQUALNOT_EQUALIDENTICALNOT_IDENTICALNOTGTLTGTELTECOMPARECOALESCEASSIGN_REFARRAY_NEWARRAY_ACCESS_READARRAY_ACCESS_WRITEARRAY_ACCESS_PUSHARRAY_UNSETCONCATUNSETFE_INITFE_NEXTFE_VALIDTHROWINIT_CALL_BY_NAMEASSIGNASSIGN_ADDASSIGN_SUBASSIGN_MULASSIGN_DIVASSIGN_MODASSIGN_POWASSIGN_BW_ANDASSIGN_BW_ORASSIGN_BW_XORASSIGN_CONCATASSIGN_LSHIFTASSIGN_RSHIFTASSIGN_COALESCECASTPRE_INCPOST_INCPRE_DECPOST_DECLOADLOAD_REFCONSTJUMPJUMP_TRUEJUMP_FALSEINIT_CALLCALLECHOISSETFE_KEYFE_VALUEFE_VALUE_REF"

var _Operator_index = [...]uint16{0, 4, 7, 11, 17, 27, 30, 33, 36, 39, 42, 45, 51, 56, 62, 68, 74, 80, 85, 94, 103, 116, 119, 121, 123, 126, 129, 136, 144, 154, 163, 180, 198, 215, 226, 232, 237, 244, 251, 259, 264, 281, 287, 297, 307, 317, 327, 337, 347, 360, 372, 385, 398, 411, 424, 439, 443, 450, 458, 465, 473, 477, 485, 490, 494, 503, 513, 522, 526, 530, 535, 541, 549, 561}

func (i Operator) String() string {
	if i >= Operator(len(_Operator_index)-1) {
		return "Operator(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Operator_name[_Operator_index[i]:_Operator_index[i+1]]
}
